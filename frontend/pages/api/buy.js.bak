import { ethers, Wallet, Contract, utils } from 'ethers'
import { shop, asset } from '../../constants'
import cryptoDoggyAbi from '../../abis/CryptoDoggy.json'

const shopAddress = shop.address.ropsten
const assetAddress = asset.address.ropsten
const cryptoDoggyAddress = '0xc9b359eb1292ad3af427d0f74b41d4a26c96b4db' // asset.address.ropsten //'0x841890e5311E9F848893102Aa1fb7ec2DC0A57d0'

const { create: client, globSource, CID } = require('ipfs-http-client');

const host = 'http://localhost:5001'

let fileContent
let provider
let wallet

const ipfs = client(host);

(async function() {
  const id = await ipfs.id()
  console.info(`Daemon active. ID: ${id.id}`);

  provider = new ethers.providers.InfuraProvider('ropsten', '583aa3fd29394208bee43d6d211c0762');
  wallet = new Wallet('4776705768145a4e3c053120b01189a60d93166b65294b4f07203c39cefd358d', provider);

  const res = await wallet.getBalance();
  console.error('wallet balance', res.toString());
})()

const generateIPFSNFTMetadata = (body) => {
  console.error('generatingMetadata', body);
}

const ipfsUpload = async (metadata) => {

  const files = [{
    path: '/crypto-doggie.png',
    content: fileContent
  }, {
    path: '/details',
    content: JSON.stringify(metadata)
  }]
  
  let results = []
  for await (const result of ipfs.addAll(files)) {
    results.push(result)
  }

  return { uploaded: true, ipfs: results.map(r => r.cid.toString()) }
}

const awardItem = async (recipient, price, assetHash, metadataHash) => {
  const cryptoDoggy = new Contract(assetAddress, cryptoDoggyAbi, wallet);

  const response = await cryptoDoggy.awardItem(recipient, price, assetHash, metadataHash)
  console.error(7123, response)

  return { awardItem: response }
}

const transferNFT = async (req, res) => {
  const {
    query: { id, name },
    body,
  } = req

  console.error(321, body);
  const ipfsResult = await ipfsUpload(generateIPFSNFTMetadata(body));
  const award = await awardItem(body.recipient, body.price, ipfsResult.ipfs[0], ipfsResult.ipfs[1]);

  // Update or create data in your database
  res.status(200).json({ id, name: name || `User ${id}`, award, ipfs: { asset: ipfsResult.ipfs[0], metadata: ipfsResult.ipfs[1] } })
}

export default async function handler(req, res) {
  const {
    method,
  } = req
  switch (method) {
    case 'POST':
      await transferNFT(req, res);
      break
    default:
      res.setHeader('Allow', ['POST'])
      res.status(405).end(`Method ${method} Not Allowed`)
  }
}
